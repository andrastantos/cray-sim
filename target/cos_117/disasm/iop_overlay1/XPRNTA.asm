@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ This gets loaded to 0x4304 (0x430a)
@@ Input:
@@     OR[280]: Device desc.
@@     OR[281]: Function code
@@       0 -
@@       1 - 
@@       2 - 
@@       3 - 
@@       4 - 
@@       5 - 
@@
@@     OR[282]: return value

0x0000 (0x000000) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x0001 (0x000002) 0x291A-       f:00024 d: 282 | OR[282] = A                   
0x0002 (0x000004) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x0003 (0x000006) 0x1402-       f:00012 d:   2 | A = A + 2 (0x0002)            
0x0004 (0x000008) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x0005 (0x00000A) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x0006 (0x00000C) 0x291B-       f:00024 d: 283 | OR[283] = A                   
0x0007 (0x00000E) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x0008 (0x000010) 0x1414-       f:00012 d:  20 | A = A + 20 (0x0014)           
0x0009 (0x000012) 0x290D-       f:00024 d: 269 | OR[269] = A                   
0x000A (0x000014) 0x310D-       f:00030 d: 269 | A = (OR[269])                 
0x000B (0x000016) 0x290E-       f:00024 d: 270 | OR[270] = A                   
0x000C (0x000018) 0x210E-       f:00020 d: 270 | A = OR[270]                   
0x000D (0x00001A) 0x12FF-       f:00011 d: 255 | A = A & 255 (0x00FF)          
0x000E (0x00001C) 0x1401-       f:00012 d:   1 | A = A + 1 (0x0001)            
0x000F (0x00001E) 0x290F-       f:00024 d: 271 | OR[271] = A                   
0x0010 (0x000020) 0x210F-       f:00020 d: 271 | A = OR[271]                   
0x0011 (0x000022) 0x12FF-       f:00011 d: 255 | A = A & 255 (0x00FF)          
0x0012 (0x000024) 0x290F-       f:00024 d: 271 | OR[271] = A                   
0x0013 (0x000026) 0x210E-       f:00020 d: 270 | A = OR[270]                   
0x0014 (0x000028) 0x1A00-0xFF00 f:00015 d:   0 | A = A & 65280 (0xFF00)        
0x0016 (0x00002C) 0x250F-       f:00022 d: 271 | A = A + OR[271]               
0x0017 (0x00002E) 0x290E-       f:00024 d: 270 | OR[270] = A                   
0x0018 (0x000030) 0x390D-       f:00034 d: 269 | (OR[269]) = A                 
0x0019 (0x000032) 0x210F-       f:00020 d: 271 | A = OR[271]                   
0x001A (0x000034) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x001B (0x000036) 0x1414-       f:00012 d:  20 | A = A + 20 (0x0014)           
0x001C (0x000038) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x001D (0x00003A) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x001E (0x00003C) 0x12FF-       f:00011 d: 255 | A = A & 255 (0x00FF)          
0x001F (0x00003E) 0x1603-       f:00013 d:   3 | A = A - 3 (0x0003)            
0x0020 (0x000040) 0x8402-       f:00102 d:   2 | P = P + 2 (0x0022), A = 0     
0x0021 (0x000042) 0x7008-       f:00070 d:   8 | P = P + 8 (0x0029)            
0x0022 (0x000044) 0x1800-0x0245 f:00014 d:   0 | A = 581 (0x0245)              @ Print string: '@?S: ERROR RECOVERY LIMIT REACHED'
0x0024 (0x000048) 0x291D-       f:00024 d: 285 | OR[285] = A                   
0x0025 (0x00004A) 0x7590-       f:00072 d: 400 | R = P + 400 (0x01B5)          @ Call MSGHND, OR[285]: Message number, OR[275]: First parameter
0x0026 (0x00004C) 0x1002-       f:00010 d:   2 | A = 2 (0x0002)                
0x0027 (0x00004E) 0x291A-       f:00024 d: 282 | OR[282] = A                   
0x0028 (0x000050) 0x7066-       f:00070 d: 102 | P = P + 102 (0x008E)          
@ Test function code
@ Function 0 handler
0x0029 (0x000052) 0x2119-       f:00020 d: 281 | A = OR[281]                   
0x002A (0x000054) 0x8402-       f:00102 d:   2 | P = P + 2 (0x002C), A = 0     
0x002B (0x000056) 0x7003-       f:00070 d:   3 | P = P + 3 (0x002E)            
0x002C (0x000058) 0x7480-       f:00072 d: 128 | R = P + 128 (0x00AC)          
0x002D (0x00005A) 0x7061-       f:00070 d:  97 | P = P + 97 (0x008E)           
@ Function 1 handler
0x002E (0x00005C) 0x2119-       f:00020 d: 281 | A = OR[281]                   
0x002F (0x00005E) 0x1601-       f:00013 d:   1 | A = A - 1 (0x0001)            
0x0030 (0x000060) 0x8402-       f:00102 d:   2 | P = P + 2 (0x0032), A = 0     
0x0031 (0x000062) 0x7034-       f:00070 d:  52 | P = P + 52 (0x0065)           
0x0032 (0x000064) 0x747A-       f:00072 d: 122 | R = P + 122 (0x00AC)          
0x0033 (0x000066) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x0034 (0x000068) 0xD80F-       f:00154 d:  15 | io 0017 (EXB), fn014           | Data output to A register (DOA)
0x0035 (0x00006A) 0x74D3-       f:00072 d: 211 | R = P + 211 (0x0108)          @ Wait for EXP device to clear busy
0x0036 (0x00006C) 0x1004-       f:00010 d:   4 | A = 4 (0x0004)                
0x0037 (0x00006E) 0xDE0F-       f:00157 d:  15 | io 0017 (EXB), fn017           | Send control
0x0038 (0x000070) 0x74D0-       f:00072 d: 208 | R = P + 208 (0x0108)          @ Wait for EXP device to clear busy
0x0039 (0x000072) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x003A (0x000074) 0xCC0F-       f:00146 d:  15 | io 0017 (EXB), fn006           | Send interface mask (MSKO)
0x003B (0x000076) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x003C (0x000078) 0x1411-       f:00012 d:  17 | A = A + 17 (0x0011)           
0x003D (0x00007A) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x003E (0x00007C) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x003F (0x00007E) 0x0A09-       f:00005 d:   9 | A = A < 9 (0x0009)            
0x0040 (0x000080) 0x1401-       f:00012 d:   1 | A = A + 1 (0x0001)            
0x0041 (0x000082) 0x0C09-       f:00006 d:   9 | A = A >> 9 (0x0009)           
0x0042 (0x000084) 0x3908-       f:00034 d: 264 | (OR[264]) = A                 
0x0043 (0x000086) 0x74D1-       f:00072 d: 209 | R = P + 209 (0x0114)          @ Wait for device to respond to a function
0x0044 (0x000088) 0x211C-       f:00020 d: 284 | A = OR[284]                   
0x0045 (0x00008A) 0x1A00-0x0800 f:00015 d:   0 | A = A & 2048 (0x0800)         
0x0047 (0x00008E) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x0048 (0x000090) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x0049 (0x000092) 0x2708-       f:00023 d: 264 | A = A - OR[264]               
0x004A (0x000094) 0x8602-       f:00103 d:   2 | P = P + 2 (0x004C), A # 0     
0x004B (0x000096) 0x7014-       f:00070 d:  20 | P = P + 20 (0x005F)           
0x004C (0x000098) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x004D (0x00009A) 0x1414-       f:00012 d:  20 | A = A + 20 (0x0014)           
0x004E (0x00009C) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x004F (0x00009E) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x0050 (0x0000A0) 0x0808-       f:00004 d:   8 | A = A > 8 (0x0008)            
0x0051 (0x0000A2) 0x8402-       f:00102 d:   2 | P = P + 2 (0x0053), A = 0     
0x0052 (0x0000A4) 0x700D-       f:00070 d:  13 | P = P + 13 (0x005F)           
0x0053 (0x0000A6) 0x1800-0x0244 f:00014 d:   0 | A = 580 (0x0244)              @ Print: '@?S: PAPER LOW'
0x0055 (0x0000AA) 0x291D-       f:00024 d: 285 | OR[285] = A                   
0x0056 (0x0000AC) 0x755F-       f:00072 d: 351 | R = P + 351 (0x01B5)          @ Call MSGHND, OR[285]: Message number, OR[275]: First parameter
0x0057 (0x0000AE) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x0058 (0x0000B0) 0x1414-       f:00012 d:  20 | A = A + 20 (0x0014)           
0x0059 (0x0000B2) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x005A (0x0000B4) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x005B (0x0000B6) 0x0A09-       f:00005 d:   9 | A = A < 9 (0x0009)            
0x005C (0x0000B8) 0x1401-       f:00012 d:   1 | A = A + 1 (0x0001)            
0x005D (0x0000BA) 0x0C09-       f:00006 d:   9 | A = A >> 9 (0x0009)           
0x005E (0x0000BC) 0x3908-       f:00034 d: 264 | (OR[264]) = A                 
0x005F (0x0000BE) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x0060 (0x0000C0) 0x1413-       f:00012 d:  19 | A = A + 19 (0x0013)           
0x0061 (0x0000C2) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x0062 (0x0000C4) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x0063 (0x0000C6) 0x3908-       f:00034 d: 264 | (OR[264]) = A                 
0x0064 (0x0000C8) 0x702A-       f:00070 d:  42 | P = P + 42 (0x008E)           
@ Function 2 handler
0x0065 (0x0000CA) 0x2119-       f:00020 d: 281 | A = OR[281]                   
0x0066 (0x0000CC) 0x1602-       f:00013 d:   2 | A = A - 2 (0x0002)            
0x0067 (0x0000CE) 0x8402-       f:00102 d:   2 | P = P + 2 (0x0069), A = 0     
0x0068 (0x0000D0) 0x7003-       f:00070 d:   3 | P = P + 3 (0x006B)            
0x0069 (0x0000D2) 0x7443-       f:00072 d:  67 | R = P + 67 (0x00AC)           
0x006A (0x0000D4) 0x7024-       f:00070 d:  36 | P = P + 36 (0x008E)           
@ Function 4 handler
0x006B (0x0000D6) 0x2119-       f:00020 d: 281 | A = OR[281]                   
0x006C (0x0000D8) 0x1604-       f:00013 d:   4 | A = A - 4 (0x0004)            
0x006D (0x0000DA) 0x8402-       f:00102 d:   2 | P = P + 2 (0x006F), A = 0     
0x006E (0x0000DC) 0x7008-       f:00070 d:   8 | P = P + 8 (0x0076)            
0x006F (0x0000DE) 0x1800-0x0241 f:00014 d:   0 | A = 577 (0x0241)              @ Print: '@?S: DEVICE TIMEOUT'
0x0071 (0x0000E2) 0x291D-       f:00024 d: 285 | OR[285] = A                   
0x0072 (0x0000E4) 0x7543-       f:00072 d: 323 | R = P + 323 (0x01B5)          @ Call MSGHND, OR[285]: Message number, OR[275]: First parameter
0x0073 (0x0000E6) 0x7511-       f:00072 d: 273 | R = P + 273 (0x0184)          @ Handle user feedback upon error
0x0074 (0x0000E8) 0x7438-       f:00072 d:  56 | R = P + 56 (0x00AC)           
0x0075 (0x0000EA) 0x7019-       f:00070 d:  25 | P = P + 25 (0x008E)           
@ Function 5 handler
0x0076 (0x0000EC) 0x2119-       f:00020 d: 281 | A = OR[281]                   
0x0077 (0x0000EE) 0x1605-       f:00013 d:   5 | A = A - 5 (0x0005)            
0x0078 (0x0000F0) 0x8402-       f:00102 d:   2 | P = P + 2 (0x007A), A = 0     
0x0079 (0x0000F2) 0x7008-       f:00070 d:   8 | P = P + 8 (0x0081)            
0x007A (0x0000F4) 0x1800-0x0243 f:00014 d:   0 | A = 579 (0x0243)              @ Print: '@?S: VACUUM FAULT'
0x007C (0x0000F8) 0x291D-       f:00024 d: 285 | OR[285] = A                   
0x007D (0x0000FA) 0x7538-       f:00072 d: 312 | R = P + 312 (0x01B5)          @ Call MSGHND, OR[285]: Message number, OR[275]: First parameter
0x007E (0x0000FC) 0x7506-       f:00072 d: 262 | R = P + 262 (0x0184)          @ Handle user feedback upon error
0x007F (0x0000FE) 0x742D-       f:00072 d:  45 | R = P + 45 (0x00AC)           
0x0080 (0x000100) 0x700E-       f:00070 d:  14 | P = P + 14 (0x008E)           
@ Function 3 handler
0x0081 (0x000102) 0x2119-       f:00020 d: 281 | A = OR[281]                   
0x0082 (0x000104) 0x1603-       f:00013 d:   3 | A = A - 3 (0x0003)            
0x0083 (0x000106) 0x8402-       f:00102 d:   2 | P = P + 2 (0x0085), A = 0     
0x0084 (0x000108) 0x7008-       f:00070 d:   8 | P = P + 8 (0x008C)            
0x0085 (0x00010A) 0x1800-0x0242 f:00014 d:   0 | A = 578 (0x0242)              @ Print: '@?S: CHANNEL TIMEOUT'
0x0087 (0x00010E) 0x291D-       f:00024 d: 285 | OR[285] = A                   
0x0088 (0x000110) 0x752D-       f:00072 d: 301 | R = P + 301 (0x01B5)          @ Call MSGHND, OR[285]: Message number, OR[275]: First parameter
0x0089 (0x000112) 0x74FB-       f:00072 d: 251 | R = P + 251 (0x0184)          @ Handle user feedback upon error
0x008A (0x000114) 0x7422-       f:00072 d:  34 | R = P + 34 (0x00AC)           
0x008B (0x000116) 0x7003-       f:00070 d:   3 | P = P + 3 (0x008E)            
@ FATAL: we didn't get a valid function code
0x008C (0x000118) 0x7C34-       f:00076 d:  52 | R = OR[52]                    
0x008D (0x00011A) 0x0000-       f:00000 d:   0 | PASS                          

0x008E (0x00011C) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x008F (0x00011E) 0x1414-       f:00012 d:  20 | A = A + 20 (0x0014)           
0x0090 (0x000120) 0x290D-       f:00024 d: 269 | OR[269] = A                   
0x0091 (0x000122) 0x310D-       f:00030 d: 269 | A = (OR[269])                 
0x0092 (0x000124) 0x290E-       f:00024 d: 270 | OR[270] = A                   
0x0093 (0x000126) 0x210E-       f:00020 d: 270 | A = OR[270]                   
0x0094 (0x000128) 0x12FF-       f:00011 d: 255 | A = A & 255 (0x00FF)          
0x0095 (0x00012A) 0x1601-       f:00013 d:   1 | A = A - 1 (0x0001)            
0x0096 (0x00012C) 0x290F-       f:00024 d: 271 | OR[271] = A                   
0x0097 (0x00012E) 0x210F-       f:00020 d: 271 | A = OR[271]                   
0x0098 (0x000130) 0x12FF-       f:00011 d: 255 | A = A & 255 (0x00FF)          
0x0099 (0x000132) 0x290F-       f:00024 d: 271 | OR[271] = A                   
0x009A (0x000134) 0x210E-       f:00020 d: 270 | A = OR[270]                   
0x009B (0x000136) 0x1A00-0xFF00 f:00015 d:   0 | A = A & 65280 (0xFF00)        
0x009D (0x00013A) 0x250F-       f:00022 d: 271 | A = A + OR[271]               
0x009E (0x00013C) 0x290E-       f:00024 d: 270 | OR[270] = A                   
0x009F (0x00013E) 0x390D-       f:00034 d: 269 | (OR[269]) = A                 
0x00A0 (0x000140) 0x210F-       f:00020 d: 271 | A = OR[271]                   
@ Set return value (from OR[282]) and return from overlay
0x00A1 (0x000142) 0x2005-       f:00020 d:   5 | A = OR[5]                     
0x00A2 (0x000144) 0x1406-       f:00012 d:   6 | A = A + 6 (0x0006)            
0x00A3 (0x000146) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x00A4 (0x000148) 0x211A-       f:00020 d: 282 | A = OR[282]                   
0x00A5 (0x00014A) 0x3908-       f:00034 d: 264 | (OR[264]) = A                 
0x00A6 (0x00014C) 0x102A-       f:00010 d:  42 | A = 42 (0x002A)               
0x00A7 (0x00014E) 0x2920-       f:00024 d: 288 | OR[288] = A                   
0x00A8 (0x000150) 0x1120-       f:00010 d: 288 | A = 288 (0x0120)              
0x00A9 (0x000152) 0x5800-       f:00054 d:   0 | B = A                         
0x00AA (0x000154) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x00AB (0x000156) 0x7C09-       f:00076 d:   9 | R = OR[9]                     

0x00AC (0x000158) 0x7521-       f:00072 d: 289 | R = P + 289 (0x01CD)          @ Return RegA from printer in OR[284]
0x00AD (0x00015A) 0x211C-       f:00020 d: 284 | A = OR[284]                   @ Check if bit 15 of RegA is set. If set, print '@PR0 NOT READY' and wait for bit 15 of RegA to clear
0x00AE (0x00015C) 0x1A00-0x8000 f:00015 d:   0 | A = A & 32768 (0x8000)        
0x00B0 (0x000160) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x00B1 (0x000162) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x00B2 (0x000164) 0x2708-       f:00023 d: 264 | A = A - OR[264]               
0x00B3 (0x000166) 0x8602-       f:00103 d:   2 | P = P + 2 (0x00B5), A # 0     
0x00B4 (0x000168) 0x7002-       f:00070 d:   2 | P = P + 2 (0x00B6)            
0x00B5 (0x00016A) 0x7496-       f:00072 d: 150 | R = P + 150 (0x014B)          @ Print '@PR0 NOT READY' and wait for bit 15 of RegA to clear
0x00B6 (0x00016C) 0x211C-       f:00020 d: 284 | A = OR[284]                   @ Check if bit 13 of RegA is set. If set, wait for device interrupt
0x00B7 (0x00016E) 0x1A00-0x2000 f:00015 d:   0 | A = A & 8192 (0x2000)         
0x00B9 (0x000172) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x00BA (0x000174) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x00BB (0x000176) 0x2708-       f:00023 d: 264 | A = A - OR[264]               
0x00BC (0x000178) 0x8602-       f:00103 d:   2 | P = P + 2 (0x00BE), A # 0     
0x00BD (0x00017A) 0x7002-       f:00070 d:   2 | P = P + 2 (0x00BF)            
0x00BE (0x00017C) 0x7456-       f:00072 d:  86 | R = P + 86 (0x0114)           @ Wait for device to respond to a function
0x00BF (0x00017E) 0x211C-       f:00020 d: 284 | A = OR[284]                   @ Check if bit 8 of RegA is set. If set, and we're called with function code 0, skip the whole communication with the printer below
0x00C0 (0x000180) 0x1300-       f:00011 d: 256 | A = A & 256 (0x0100)          
0x00C1 (0x000182) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x00C2 (0x000184) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x00C3 (0x000186) 0x2708-       f:00023 d: 264 | A = A - OR[264]               
0x00C4 (0x000188) 0x8404-       f:00102 d:   4 | P = P + 4 (0x00C8), A = 0     
0x00C5 (0x00018A) 0x2119-       f:00020 d: 281 | A = OR[281]                   
0x00C6 (0x00018C) 0x8402-       f:00102 d:   2 | P = P + 2 (0x00C8), A = 0     
0x00C7 (0x00018E) 0x7037-       f:00070 d:  55 | P = P + 55 (0x00FE)           
0x00C8 (0x000190) 0x1006-       f:00010 d:   6 | A = 6 (0x0006)                
0x00C9 (0x000192) 0xD80F-       f:00154 d:  15 | io 0017 (EXB), fn014           | Data output to A register (DOA)
0x00CA (0x000194) 0x743E-       f:00072 d:  62 | R = P + 62 (0x0108)           @ Wait for EXP device to clear busy
0x00CB (0x000196) 0x1004-       f:00010 d:   4 | A = 4 (0x0004)                
0x00CC (0x000198) 0xDE0F-       f:00157 d:  15 | io 0017 (EXB), fn017           | Send control
0x00CD (0x00019A) 0x743B-       f:00072 d:  59 | R = P + 59 (0x0108)           @ Wait for EXP device to clear busy
0x00CE (0x00019C) 0x1004-       f:00010 d:   4 | A = 4 (0x0004)                
0x00CF (0x00019E) 0xD80F-       f:00154 d:  15 | io 0017 (EXB), fn014           | Data output to A register (DOA)
0x00D0 (0x0001A0) 0x7438-       f:00072 d:  56 | R = P + 56 (0x0108)           @ Wait for EXP device to clear busy
0x00D1 (0x0001A2) 0x1004-       f:00010 d:   4 | A = 4 (0x0004)                
0x00D2 (0x0001A4) 0xDE0F-       f:00157 d:  15 | io 0017 (EXB), fn017           | Send control
0x00D3 (0x0001A6) 0x7435-       f:00072 d:  53 | R = P + 53 (0x0108)           @ Wait for EXP device to clear busy
0x00D4 (0x0001A8) 0x2118-       f:00020 d: 280 | A = OR[280]                   @ Test if desc. entry 12 is 'PR'. If it is not (presumable the printer is in ASCII mode), skip sending RegA=1 below
0x00D5 (0x0001AA) 0x140C-       f:00012 d:  12 | A = A + 12 (0x000C)           
0x00D6 (0x0001AC) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x00D7 (0x0001AE) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x00D8 (0x0001B0) 0x1E00-0x5054 f:00017 d:   0 | A = A - 20564 (0x5054)        
0x00DA (0x0001B4) 0x8402-       f:00102 d:   2 | P = P + 2 (0x00DC), A = 0     
0x00DB (0x0001B6) 0x7007-       f:00070 d:   7 | P = P + 7 (0x00E2)            
0x00DC (0x0001B8) 0x1001-       f:00010 d:   1 | A = 1 (0x0001)                
0x00DD (0x0001BA) 0xD80F-       f:00154 d:  15 | io 0017 (EXB), fn014           | Data output to A register (DOA)
0x00DE (0x0001BC) 0x742A-       f:00072 d:  42 | R = P + 42 (0x0108)           @ Wait for EXP device to clear busy
0x00DF (0x0001BE) 0x1004-       f:00010 d:   4 | A = 4 (0x0004)                
0x00E0 (0x0001C0) 0xDE0F-       f:00157 d:  15 | io 0017 (EXB), fn017           | Send control
0x00E1 (0x0001C2) 0x7427-       f:00072 d:  39 | R = P + 39 (0x0108)           @ Wait for EXP device to clear busy
0x00E2 (0x0001C4) 0x1003-       f:00010 d:   3 | A = 3 (0x0003)                
0x00E3 (0x0001C6) 0xD80F-       f:00154 d:  15 | io 0017 (EXB), fn014           | Data output to A register (DOA)
0x00E4 (0x0001C8) 0x7424-       f:00072 d:  36 | R = P + 36 (0x0108)           @ Wait for EXP device to clear busy
0x00E5 (0x0001CA) 0x1004-       f:00010 d:   4 | A = 4 (0x0004)                
0x00E6 (0x0001CC) 0xDE0F-       f:00157 d:  15 | io 0017 (EXB), fn017           | Send control
0x00E7 (0x0001CE) 0x7421-       f:00072 d:  33 | R = P + 33 (0x0108)           @ Wait for EXP device to clear busy
0x00E8 (0x0001D0) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x00E9 (0x0001D2) 0xCC0F-       f:00146 d:  15 | io 0017 (EXB), fn006           | Send interface mask (MSKO)
0x00EA (0x0001D4) 0x2118-       f:00020 d: 280 | A = OR[280]                   @ Set bit 8 of desc. entry 17.
0x00EB (0x0001D6) 0x1411-       f:00012 d:  17 | A = A + 17 (0x0011)           
0x00EC (0x0001D8) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x00ED (0x0001DA) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x00EE (0x0001DC) 0x0A09-       f:00005 d:   9 | A = A < 9 (0x0009)            
0x00EF (0x0001DE) 0x1401-       f:00012 d:   1 | A = A + 1 (0x0001)            
0x00F0 (0x0001E0) 0x0C09-       f:00006 d:   9 | A = A >> 9 (0x0009)           
0x00F1 (0x0001E2) 0x3908-       f:00034 d: 264 | (OR[264]) = A                 
0x00F2 (0x0001E4) 0x7422-       f:00072 d:  34 | R = P + 34 (0x0114)           @ Wait for device to respond to a function
0x00F3 (0x0001E6) 0x211C-       f:00020 d: 284 | A = OR[284]                   
0x00F4 (0x0001E8) 0x1A00-0x1000 f:00015 d:   0 | A = A & 4096 (0x1000)         
0x00F6 (0x0001EC) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x00F7 (0x0001EE) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x00F8 (0x0001F0) 0x2708-       f:00023 d: 264 | A = A - OR[264]               
0x00F9 (0x0001F2) 0x8602-       f:00103 d:   2 | P = P + 2 (0x00FB), A # 0     
0x00FA (0x0001F4) 0x7004-       f:00070 d:   4 | P = P + 4 (0x00FE)            
0x00FB (0x0001F6) 0x1005-       f:00010 d:   5 | A = 5 (0x0005)                @ Call XPRINTA with function code 5
0x00FC (0x0001F8) 0x291E-       f:00024 d: 286 | OR[286] = A                   
0x00FD (0x0001FA) 0x74E5-       f:00072 d: 229 | R = P + 229 (0x01E2)          @ Call XPRINTA (?????????), OR[286]: function code
0x00FE (0x0001FC) 0x211C-       f:00020 d: 284 | A = OR[284]                   
0x00FF (0x0001FE) 0x1A00-0x2000 f:00015 d:   0 | A = A & 8192 (0x2000)         
0x0101 (0x000202) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x0102 (0x000204) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x0103 (0x000206) 0x2708-       f:00023 d: 264 | A = A - OR[264]               
0x0104 (0x000208) 0x8602-       f:00103 d:   2 | P = P + 2 (0x0106), A # 0     
0x0105 (0x00020A) 0x7002-       f:00070 d:   2 | P = P + 2 (0x0107)            
0x0106 (0x00020C) 0x740E-       f:00072 d:  14 | R = P + 14 (0x0114)           @ Wait for device to respond to a function
0x0107 (0x00020E) 0x0200-       f:00001 d:   0 | EXIT                          


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Wait for EXP device to clear busy
0x0108 (0x000210) 0x1190-       f:00010 d: 400 | A = 400 (0x0190)              
0x0109 (0x000212) 0x8405-       f:00102 d:   5 | P = P + 5 (0x010E), A = 0     
0x010A (0x000214) 0x420F-       f:00041 d:  15 | C = 1, io 0017 (EXB) = BZ     
0x010B (0x000216) 0x8003-       f:00100 d:   3 | P = P + 3 (0x010E), C = 0     
0x010C (0x000218) 0x1601-       f:00013 d:   1 | A = A - 1 (0x0001)            
0x010D (0x00021A) 0x7204-       f:00071 d:   4 | P = P - 4 (0x0109)            
0x010E (0x00021C) 0x8402-       f:00102 d:   2 | P = P + 2 (0x0110), A = 0     
0x010F (0x00021E) 0x7004-       f:00070 d:   4 | P = P + 4 (0x0113)            
0x0110 (0x000220) 0x1003-       f:00010 d:   3 | A = 3 (0x0003)                @ Call XPRINTA with function code 3
0x0111 (0x000222) 0x291E-       f:00024 d: 286 | OR[286] = A                   
0x0112 (0x000224) 0x74D0-       f:00072 d: 208 | R = P + 208 (0x01E2)          @ Call XPRINTA (?????????), OR[286]: function code
0x0113 (0x000226) 0x0200-       f:00001 d:   0 | EXIT                          

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Wait for device to respond to a function
@@ Prints [abort-retry-...] message on timeout
@@ Output:
@@    OR[284]: probably user response
0x0114 (0x000228) 0x0400-       f:00002 d:   0 | I = 0                         
0x0115 (0x00022A) 0x0000-       f:00000 d:   0 | PASS                          
0x0116 (0x00022C) 0x1002-       f:00010 d:   2 | A = 2 (0x0002)                
0x0117 (0x00022E) 0xCE0F-       f:00147 d:  15 | io 0017 (EXB), fn007           | Set interrupt mode
@ Wait for device interrupt or timeout
0x0118 (0x000230) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x0119 (0x000232) 0x1409-       f:00012 d:   9 | A = A + 9 (0x0009)            
0x011A (0x000234) 0x2913-       f:00024 d: 275 | OR[275] = A                   
0x011B (0x000236) 0x1009-       f:00010 d:   9 | A = 9 (0x0009)                
0x011C (0x000238) 0x2920-       f:00024 d: 288 | OR[288] = A                   
0x011D (0x00023A) 0x2113-       f:00020 d: 275 | A = OR[275]                   
0x011E (0x00023C) 0x2921-       f:00024 d: 289 | OR[289] = A                   
0x011F (0x00023E) 0x1032-       f:00010 d:  50 | A = 50 (0x0032)               
0x0120 (0x000240) 0x2922-       f:00024 d: 290 | OR[290] = A                   
0x0121 (0x000242) 0x1120-       f:00010 d: 288 | A = 288 (0x0120)              
0x0122 (0x000244) 0x5800-       f:00054 d:   0 | B = A                         
0x0123 (0x000246) 0x1800-0x1118 f:00014 d:   0 | A = 4376 (0x1118)             
0x0125 (0x00024A) 0x7C09-       f:00076 d:   9 | R = OR[9]                     

0x0126 (0x00024C) 0x2006-       f:00020 d:   6 | A = OR[6]                     @ This is at 0x4430
0x0127 (0x00024E) 0x140B-       f:00012 d:  11 | A = A + 11 (0x000B)           
0x0128 (0x000250) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x0129 (0x000252) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x012A (0x000254) 0x291C-       f:00024 d: 284 | OR[284] = A                   
0x012B (0x000256) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x012C (0x000258) 0xCE0F-       f:00147 d:  15 | io 0017 (EXB), fn007           | Set interrupt mode
0x012D (0x00025A) 0x211B-       f:00020 d: 283 | A = OR[283]                   
0x012E (0x00025C) 0xCA0F-       f:00145 d:  15 | io 0017 (EXB), fn005           | Load device address
0x012F (0x00025E) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x0130 (0x000260) 0x1411-       f:00012 d:  17 | A = A + 17 (0x0011)           
0x0131 (0x000262) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x0132 (0x000264) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x0133 (0x000266) 0x1A00-0xFF00 f:00015 d:   0 | A = A & 65280 (0xFF00)        
0x0135 (0x00026A) 0x3908-       f:00034 d: 264 | (OR[264]) = A                 
0x0136 (0x00026C) 0x211C-       f:00020 d: 284 | A = OR[284]                   
0x0137 (0x00026E) 0x8602-       f:00103 d:   2 | P = P + 2 (0x0139), A # 0     
0x0138 (0x000270) 0x700D-       f:00070 d:  13 | P = P + 13 (0x0145)           
0x0139 (0x000272) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x013A (0x000274) 0x1411-       f:00012 d:  17 | A = A + 17 (0x0011)           
0x013B (0x000276) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x013C (0x000278) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x013D (0x00027A) 0x0E01-       f:00007 d:   1 | A = A << 1 (0x0001)           
0x013E (0x00027C) 0x0A08-       f:00005 d:   8 | A = A < 8 (0x0008)            
0x013F (0x00027E) 0x1400-       f:00012 d:   0 | A = A + 0 (0x0000)            
0x0140 (0x000280) 0x0C09-       f:00006 d:   9 | A = A >> 9 (0x0009)           
0x0141 (0x000282) 0x3908-       f:00034 d: 264 | (OR[264]) = A                 
0x0142 (0x000284) 0x1004-       f:00010 d:   4 | A = 4 (0x0004)                
0x0143 (0x000286) 0x291E-       f:00024 d: 286 | OR[286] = A                   
0x0144 (0x000288) 0x749E-       f:00072 d: 158 | R = P + 158 (0x01E2)          
0x0145 (0x00028A) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x0146 (0x00028C) 0x140E-       f:00012 d:  14 | A = A + 14 (0x000E)           
0x0147 (0x00028E) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x0148 (0x000290) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x0149 (0x000292) 0x291C-       f:00024 d: 284 | OR[284] = A                   
0x014A (0x000294) 0x0200-       f:00001 d:   0 | EXIT                          


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Print '@PR0 NOT READY' and wait for bit 15 of RegA to clear
0x014B (0x000296) 0x1800-0x0202 f:00014 d:   0 | A = 514 (0x0202)              @ Print: '@?S: NOT READY'
0x014D (0x00029A) 0x291D-       f:00024 d: 285 | OR[285] = A                   
0x014E (0x00029C) 0x7467-       f:00072 d: 103 | R = P + 103 (0x01B5)          @ Call MSGHND, OR[285]: Message number, OR[275]: First parameter
0x014F (0x00029E) 0x2118-       f:00020 d: 280 | A = OR[280]                   @ Set bit 8 in desc. entry 11
0x0150 (0x0002A0) 0x140B-       f:00012 d:  11 | A = A + 11 (0x000B)           
0x0151 (0x0002A2) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x0152 (0x0002A4) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x0153 (0x0002A6) 0x0A09-       f:00005 d:   9 | A = A < 9 (0x0009)            
0x0154 (0x0002A8) 0x1401-       f:00012 d:   1 | A = A + 1 (0x0001)            
0x0155 (0x0002AA) 0x0C09-       f:00006 d:   9 | A = A >> 9 (0x0009)           
0x0156 (0x0002AC) 0x3908-       f:00034 d: 264 | (OR[264]) = A                 
@ This while loop waits until bit 15 of RegA clears
0x0157 (0x0002AE) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x0158 (0x0002B0) 0x291F-       f:00024 d: 287 | OR[287] = A                   
0x0159 (0x0002B2) 0x211F-       f:00020 d: 287 | A = OR[287]                   
0x015A (0x0002B4) 0x8620-       f:00103 d:  32 | P = P + 32 (0x017A), A # 0    
0x015B (0x0002B6) 0x7472-       f:00072 d: 114 | R = P + 114 (0x01CD)          @ Return RegA from printer in OR[284]
0x015C (0x0002B8) 0x211C-       f:00020 d: 284 | A = OR[284]                   
0x015D (0x0002BA) 0x1A00-0x8000 f:00015 d:   0 | A = A & 32768 (0x8000)        @ Test if bit 15 of RegA is set
0x015F (0x0002BE) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x0160 (0x0002C0) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x0161 (0x0002C2) 0x2708-       f:00023 d: 264 | A = A - OR[264]               
0x0162 (0x0002C4) 0x8402-       f:00102 d:   2 | P = P + 2 (0x0164), A = 0     
0x0163 (0x0002C6) 0x7003-       f:00070 d:   3 | P = P + 3 (0x0166)            
0x0164 (0x0002C8) 0x1001-       f:00010 d:   1 | A = 1 (0x0001)                @ Bit 15 of RegA is not set: set OR[287] to 1 to terminate the loop
0x0165 (0x0002CA) 0x291F-       f:00024 d: 287 | OR[287] = A                   
0x0166 (0x0002CC) 0x2118-       f:00020 d: 280 | A = OR[280]                   @ Test if upper byte of desc. entry 11 is 1 or 4. If not, terminate the loop (BTW: we've just set it to 1 above)
0x0167 (0x0002CE) 0x140B-       f:00012 d:  11 | A = A + 11 (0x000B)           
0x0168 (0x0002D0) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x0169 (0x0002D2) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x016A (0x0002D4) 0x0808-       f:00004 d:   8 | A = A > 8 (0x0008)            
0x016B (0x0002D6) 0x291A-       f:00024 d: 282 | OR[282] = A                   
0x016C (0x0002D8) 0x211A-       f:00020 d: 282 | A = OR[282]                   
0x016D (0x0002DA) 0x1601-       f:00013 d:   1 | A = A - 1 (0x0001)            
0x016E (0x0002DC) 0x8405-       f:00102 d:   5 | P = P + 5 (0x0173), A = 0     
0x016F (0x0002DE) 0x211A-       f:00020 d: 282 | A = OR[282]                   
0x0170 (0x0002E0) 0x1604-       f:00013 d:   4 | A = A - 4 (0x0004)            
0x0171 (0x0002E2) 0x8402-       f:00102 d:   2 | P = P + 2 (0x0173), A = 0     
0x0172 (0x0002E4) 0x7005-       f:00070 d:   5 | P = P + 5 (0x0177)            
0x0173 (0x0002E6) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x0174 (0x0002E8) 0x291A-       f:00024 d: 282 | OR[282] = A                   
0x0175 (0x0002EA) 0x745D-       f:00072 d:  93 | R = P + 93 (0x01D2)           
0x0176 (0x0002EC) 0x7003-       f:00070 d:   3 | P = P + 3 (0x0179)            
0x0177 (0x0002EE) 0x1001-       f:00010 d:   1 | A = 1 (0x0001)                
0x0178 (0x0002F0) 0x291F-       f:00024 d: 287 | OR[287] = A                   
0x0179 (0x0002F2) 0x7220-       f:00071 d:  32 | P = P - 32 (0x0159)           

0x017A (0x0002F4) 0x2118-       f:00020 d: 280 | A = OR[280]                   @ Clear upper byte of desc. entry 11.
0x017B (0x0002F6) 0x140B-       f:00012 d:  11 | A = A + 11 (0x000B)           
0x017C (0x0002F8) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x017D (0x0002FA) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x017E (0x0002FC) 0x0E01-       f:00007 d:   1 | A = A << 1 (0x0001)           
0x017F (0x0002FE) 0x0A08-       f:00005 d:   8 | A = A < 8 (0x0008)            
0x0180 (0x000300) 0x1400-       f:00012 d:   0 | A = A + 0 (0x0000)            
0x0181 (0x000302) 0x0C09-       f:00006 d:   9 | A = A >> 9 (0x0009)           
0x0182 (0x000304) 0x3908-       f:00034 d: 264 | (OR[264]) = A                 
0x0183 (0x000306) 0x0200-       f:00001 d:   0 | EXIT                          

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Handle user feedback upon error
0x0184 (0x000308) 0x1800-0x0201 f:00014 d:   0 | A = 513 (0x0201)              @ Print '*** RESPOND *** [RESUME,ABORT,RESTART] ***'
0x0186 (0x00030C) 0x291D-       f:00024 d: 285 | OR[285] = A                   
0x0187 (0x00030E) 0x742E-       f:00072 d:  46 | R = P + 46 (0x01B5)           @ Call MSGHND, OR[285]: Message number, OR[275]: First parameter
0x0188 (0x000310) 0x1001-       f:00010 d:   1 | A = 1 (0x0001)                
0x0189 (0x000312) 0x291A-       f:00024 d: 282 | OR[282] = A                   
0x018A (0x000314) 0x211A-       f:00020 d: 282 | A = OR[282]                   
0x018B (0x000316) 0x12FF-       f:00011 d: 255 | A = A & 255 (0x00FF)          
0x018C (0x000318) 0x291A-       f:00024 d: 282 | OR[282] = A                   
0x018D (0x00031A) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x018E (0x00031C) 0x140B-       f:00012 d:  11 | A = A + 11 (0x000B)           
0x018F (0x00031E) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x0190 (0x000320) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x0191 (0x000322) 0x0A09-       f:00005 d:   9 | A = A < 9 (0x0009)            
0x0192 (0x000324) 0x251A-       f:00022 d: 282 | A = A + OR[282]               
0x0193 (0x000326) 0x0C09-       f:00006 d:   9 | A = A >> 9 (0x0009)           
0x0194 (0x000328) 0x3908-       f:00034 d: 264 | (OR[264]) = A                 
0x0195 (0x00032A) 0x211A-       f:00020 d: 282 | A = OR[282]                   
0x0196 (0x00032C) 0x1601-       f:00013 d:   1 | A = A - 1 (0x0001)            
0x0197 (0x00032E) 0x8609-       f:00103 d:   9 | P = P + 9 (0x01A0), A # 0     
0x0198 (0x000330) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x0199 (0x000332) 0x140B-       f:00012 d:  11 | A = A + 11 (0x000B)           
0x019A (0x000334) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x019B (0x000336) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x019C (0x000338) 0x0808-       f:00004 d:   8 | A = A > 8 (0x0008)            
0x019D (0x00033A) 0x291A-       f:00024 d: 282 | OR[282] = A                   
0x019E (0x00033C) 0x7434-       f:00072 d:  52 | R = P + 52 (0x01D2)           
0x019F (0x00033E) 0x720A-       f:00071 d:  10 | P = P - 10 (0x0195)           
0x01A0 (0x000340) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x01A1 (0x000342) 0x140B-       f:00012 d:  11 | A = A + 11 (0x000B)           
0x01A2 (0x000344) 0x2908-       f:00024 d: 264 | OR[264] = A                   
0x01A3 (0x000346) 0x3108-       f:00030 d: 264 | A = (OR[264])                 
0x01A4 (0x000348) 0x0E01-       f:00007 d:   1 | A = A << 1 (0x0001)           
0x01A5 (0x00034A) 0x0A08-       f:00005 d:   8 | A = A < 8 (0x0008)            
0x01A6 (0x00034C) 0x1400-       f:00012 d:   0 | A = A + 0 (0x0000)            
0x01A7 (0x00034E) 0x0C09-       f:00006 d:   9 | A = A >> 9 (0x0009)           
0x01A8 (0x000350) 0x3908-       f:00034 d: 264 | (OR[264]) = A                 
0x01A9 (0x000352) 0x211A-       f:00020 d: 282 | A = OR[282]                   
0x01AA (0x000354) 0x1604-       f:00013 d:   4 | A = A - 4 (0x0004)            
0x01AB (0x000356) 0x8402-       f:00102 d:   2 | P = P + 2 (0x01AD), A = 0     
0x01AC (0x000358) 0x7004-       f:00070 d:   4 | P = P + 4 (0x01B0)            
0x01AD (0x00035A) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x01AE (0x00035C) 0x291A-       f:00024 d: 282 | OR[282] = A                   
0x01AF (0x00035E) 0x7005-       f:00070 d:   5 | P = P + 5 (0x01B4)            
0x01B0 (0x000360) 0x211A-       f:00020 d: 282 | A = OR[282]                   
0x01B1 (0x000362) 0x8602-       f:00103 d:   2 | P = P + 2 (0x01B3), A # 0     
0x01B2 (0x000364) 0x7002-       f:00070 d:   2 | P = P + 2 (0x01B4)            
0x01B3 (0x000366) 0x7325-       f:00071 d: 293 | P = P - 293 (0x008E)          
0x01B4 (0x000368) 0x0200-       f:00001 d:   0 | EXIT                          

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Call MSGHND
@@ Input:
@@    OR[285]: Message number
@@    OR[275]: First parameter
0x01B5 (0x00036A) 0x1002-       f:00010 d:   2 | A = 2 (0x0002)                
0x01B6 (0x00036C) 0xCE0F-       f:00147 d:  15 | io 0017 (EXB), fn007           | Set interrupt mode
0x01B7 (0x00036E) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x01B8 (0x000370) 0x1400-       f:00012 d:   0 | A = A + 0 (0x0000)            
0x01B9 (0x000372) 0x2913-       f:00024 d: 275 | OR[275] = A                   
0x01BA (0x000374) 0x1028-       f:00010 d:  40 | A = 40 (0x0028)               
0x01BB (0x000376) 0x2920-       f:00024 d: 288 | OR[288] = A                   
0x01BC (0x000378) 0x1800-0x002F f:00014 d:   0 | A = 47 (0x002F)               
0x01BE (0x00037C) 0x2921-       f:00024 d: 289 | OR[289] = A                   
0x01BF (0x00037E) 0x211D-       f:00020 d: 285 | A = OR[285]                   
0x01C0 (0x000380) 0x2922-       f:00024 d: 290 | OR[290] = A                   
0x01C1 (0x000382) 0x2113-       f:00020 d: 275 | A = OR[275]                   
0x01C2 (0x000384) 0x2923-       f:00024 d: 291 | OR[291] = A                   
0x01C3 (0x000386) 0x1120-       f:00010 d: 288 | A = 288 (0x0120)              
0x01C4 (0x000388) 0x5800-       f:00054 d:   0 | B = A                         
0x01C5 (0x00038A) 0x1800-0x1118 f:00014 d:   0 | A = 4376 (0x1118)             
0x01C7 (0x00038E) 0x7C09-       f:00076 d:   9 | R = OR[9]                     
0x01C8 (0x000390) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x01C9 (0x000392) 0xCE0F-       f:00147 d:  15 | io 0017 (EXB), fn007           | Set interrupt mode
0x01CA (0x000394) 0x211B-       f:00020 d: 283 | A = OR[283]                   
0x01CB (0x000396) 0xCA0F-       f:00145 d:  15 | io 0017 (EXB), fn005           | Load device address
0x01CC (0x000398) 0x0200-       f:00001 d:   0 | EXIT                          

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Return RegA from printer
@@ Output: OR[284]: RegA
0x01CD (0x00039A) 0xC20F-       f:00141 d:  15 | io 0017 (EXB), fn001           | Request data input from A register (DIA)
0x01CE (0x00039C) 0x76C6-       f:00073 d: 198 | R = P - 198 (0x0108)          @ Wait for EXP device to clear busy
0x01CF (0x00039E) 0xD00F-       f:00150 d:  15 | io 0017 (EXB), fn010           | Read data bus status
0x01D0 (0x0003A0) 0x291C-       f:00024 d: 284 | OR[284] = A                   
0x01D1 (0x0003A2) 0x0200-       f:00001 d:   0 | EXIT                          

0x01D2 (0x0003A4) 0x1002-       f:00010 d:   2 | A = 2 (0x0002)                
0x01D3 (0x0003A6) 0xCE0F-       f:00147 d:  15 | io 0017 (EXB), fn007           | Set interrupt mode
0x01D4 (0x0003A8) 0x1007-       f:00010 d:   7 | A = 7 (0x0007)                
0x01D5 (0x0003AA) 0x2920-       f:00024 d: 288 | OR[288] = A                   
0x01D6 (0x0003AC) 0x1001-       f:00010 d:   1 | A = 1 (0x0001)                
0x01D7 (0x0003AE) 0x2921-       f:00024 d: 289 | OR[289] = A                   
0x01D8 (0x0003B0) 0x1120-       f:00010 d: 288 | A = 288 (0x0120)              
0x01D9 (0x0003B2) 0x5800-       f:00054 d:   0 | B = A                         
0x01DA (0x0003B4) 0x1800-0x1118 f:00014 d:   0 | A = 4376 (0x1118)             
0x01DC (0x0003B8) 0x7C09-       f:00076 d:   9 | R = OR[9]                     
0x01DD (0x0003BA) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x01DE (0x0003BC) 0xCE0F-       f:00147 d:  15 | io 0017 (EXB), fn007           | Set interrupt mode
0x01DF (0x0003BE) 0x211B-       f:00020 d: 283 | A = OR[283]                   
0x01E0 (0x0003C0) 0xCA0F-       f:00145 d:  15 | io 0017 (EXB), fn005           | Load device address
0x01E1 (0x0003C2) 0x0200-       f:00001 d:   0 | EXIT                          

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Call XPRINTA (?????????)
@@ Input:
@@   OR[286]: function code
0x01E2 (0x0003C4) 0x1028-       f:00010 d:  40 | A = 40 (0x0028)               
0x01E3 (0x0003C6) 0x2920-       f:00024 d: 288 | OR[288] = A                   
0x01E4 (0x0003C8) 0x1800-0x00AB f:00014 d:   0 | A = 171 (0x00AB)              
0x01E6 (0x0003CC) 0x2921-       f:00024 d: 289 | OR[289] = A                   
0x01E7 (0x0003CE) 0x2118-       f:00020 d: 280 | A = OR[280]                   
0x01E8 (0x0003D0) 0x2922-       f:00024 d: 290 | OR[290] = A                   
0x01E9 (0x0003D2) 0x211E-       f:00020 d: 286 | A = OR[286]                   
0x01EA (0x0003D4) 0x2923-       f:00024 d: 291 | OR[291] = A                   
0x01EB (0x0003D6) 0x1120-       f:00010 d: 288 | A = 288 (0x0120)              
0x01EC (0x0003D8) 0x5800-       f:00054 d:   0 | B = A                         
0x01ED (0x0003DA) 0x1800-0x1118 f:00014 d:   0 | A = 4376 (0x1118)             
0x01EF (0x0003DE) 0x7C09-       f:00076 d:   9 | R = OR[9]                     
0x01F0 (0x0003E0) 0x291A-       f:00024 d: 282 | OR[282] = A                   
0x01F1 (0x0003E2) 0x211A-       f:00020 d: 282 | A = OR[282]                   
0x01F2 (0x0003E4) 0x8602-       f:00103 d:   2 | P = P + 2 (0x01F4), A # 0     
0x01F3 (0x0003E6) 0x7002-       f:00070 d:   2 | P = P + 2 (0x01F5)            
0x01F4 (0x0003E8) 0x7366-       f:00071 d: 358 | P = P - 358 (0x008E)          
0x01F5 (0x0003EA) 0x1000-       f:00010 d:   0 | A = 0 (0x0000)                
0x01F6 (0x0003EC) 0xCE0F-       f:00147 d:  15 | io 0017 (EXB), fn007           | Set interrupt mode
0x01F7 (0x0003EE) 0x211B-       f:00020 d: 283 | A = OR[283]                   
0x01F8 (0x0003F0) 0xCA0F-       f:00145 d:  15 | io 0017 (EXB), fn005           | Load device address
0x01F9 (0x0003F2) 0x0200-       f:00001 d:   0 | EXIT                          
0x01FA (0x0003F4) 0x0000-       f:00000 d:   0 | PASS                          
0x01FB (0x0003F6) 0x0000-       f:00000 d:   0 | PASS                          
